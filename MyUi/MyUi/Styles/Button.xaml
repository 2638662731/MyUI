<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:My="clr-namespace:MyUi.Controls">
    <PathGeometry
        x:Key="DefaultIcon"
        Figures="M12,18A6,6,0,0,1,6,12C6,11,6.25,10.03,6.7,9.2L5.24,7.74C4.46,8.97,4,10.43,4,12A8,8,0,0,0,12,20L12,23 16,19 12,15 M12,4L12,1 8,5 12,9 12,6A6,6,0,0,1,18,12C18,13,17.75,13.97,17.3,14.8L18.76,16.26C19.54,15.03,20,13.57,20,12A8,8,0,0,0,12,4z"
        FillRule="NonZero" />

    <Style x:Key="MyButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="My:ElementExten.CornerRadius" Value="5" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Opacity" Value="0.8" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Style.Resources>
            <ControlTemplate x:Key="NormalButtonTemplate" TargetType="{x:Type Button}">
                <Border
                    x:Name="PART_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(My:ElementExten.CornerRadius)}"
                    Opacity="{TemplateBinding Opacity}">
                    <Grid
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        <ContentPresenter
                            x:Name="PART_Content"
                            Grid.Column="1"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="PART_Border" Property="Opacity" Value="1" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter TargetName="PART_Border" Property="Opacity" Value="1" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.65" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <ControlTemplate x:Key="IconButtonTemplate" TargetType="{x:Type Button}">

                <Border
                    x:Name="border"
                    Background="Transparent"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(My:ElementExten.CornerRadius)}">
                    <Grid
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        <Path
                            x:Name="path"
                            Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(My:ElementExten.IcoWidth)}"
                            Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(My:ElementExten.IcoHeight)}"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(My:ElementExten.IcoPathData)}"
                            Fill="{TemplateBinding Background}"
                            RenderTransformOrigin="0.5,0.5"
                            Stretch="Uniform">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <SkewTransform />
                                    <RotateTransform Angle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(My:ElementExten.IcoAngle)}" />
                                    <TranslateTransform />
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>


                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Cursor" Value="Hand" />
                        <Setter TargetName="path" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(My:ElementExten.MouseHoverBackGround)}" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="true">
                        <Setter TargetName="path" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(My:ElementExten.MouseHoverBackGround)}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Cursor" Value="No" />
                        <Setter TargetName="path" Property="Fill" Value="{DynamicResource Common_DisabledColor}" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="My:ElementExten.ButtonType" Value="TypeText">
                <Setter Property="Background" Value="{x:Null}" />
                <Setter Property="Foreground" Value="{DynamicResource Main_Color}" />
                <Setter Property="Template" Value="{DynamicResource NormalButtonTemplate}" />
            </Trigger>
            <Trigger Property="My:ElementExten.ButtonType" Value="Primary">
                <Setter Property="Background" Value="{DynamicResource Main_Color}" />
                <Setter Property="Foreground" Value="White" />
                <Setter Property="Template" Value="{DynamicResource NormalButtonTemplate}" />
            </Trigger>
            <Trigger Property="My:ElementExten.ButtonType" Value="Error">
                <Setter Property="Background" Value="{DynamicResource Error_Color}" />
                <Setter Property="Foreground" Value="White" />
                <Setter Property="Template" Value="{DynamicResource NormalButtonTemplate}" />
            </Trigger>
            <Trigger Property="My:ElementExten.ButtonType" Value="Warning">
                <Setter Property="Background" Value="{DynamicResource Warn_Color}" />
                <Setter Property="Foreground" Value="White" />
                <Setter Property="Template" Value="{DynamicResource NormalButtonTemplate}" />
            </Trigger>
            <Trigger Property="My:ElementExten.ButtonType" Value="Success">
                <Setter Property="Background" Value="{DynamicResource Sucess_Color}" />
                <Setter Property="Foreground" Value="White" />
                <Setter Property="Template" Value="{DynamicResource NormalButtonTemplate}" />
            </Trigger>

            <Trigger Property="My:ElementExten.ButtonType" Value="Icon">
                <Setter Property="My:ElementExten.IcoPathData" Value="{StaticResource DefaultIcon}" />
                <Setter Property="My:ElementExten.MouseHoverBackGround" Value="{DynamicResource CalendarItemButtonSelect}" />
                <Setter Property="Background" Value="{DynamicResource Main_Color}" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Template" Value="{DynamicResource IconButtonTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>



    <Style BasedOn="{StaticResource MyButtonStyle}" TargetType="Button" />

</ResourceDictionary>